package fr.rudy.newhorizon;

import fr.rudy.newhorizon.commands.LevelCommand;
import fr.rudy.newhorizon.commands.StatsCommand;
import fr.rudy.newhorizon.core.PlayerConnectionListener;
import fr.rudy.newhorizon.core.PlayerDisconnectListener;
import fr.rudy.newhorizon.level.LevelsManager;
import fr.rudy.newhorizon.level.PlayerListener;
import fr.rudy.newhorizon.stats.SessionStatManager;
import fr.rudy.newhorizon.stats.PlayerSessionListener;
import fr.rudy.newhorizon.stats.StatsGUIListener;
import fr.rudy.newhorizon.placeholders.NewHorizonPlaceholder;
import fr.rudy.newhorizon.ui.BossBarManager;
import fr.rudy.newhorizon.ui.NameTagListener;
import fr.rudy.newhorizon.ui.NameTagManager;
import fr.rudy.newhorizon.ui.TablistManager;
import org.bukkit.Bukkit;
import org.bukkit.event.Listener;
import org.bukkit.plugin.java.JavaPlugin;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

public final class Main extends JavaPlugin implements Listener {

    private static Main instance;

    public static Main get() {
        return instance;
    }

    private Connection database;
    private LevelsManager levelsManager;
    private SessionStatManager sessionStatManager;
    private TablistManager tablistManager;

    private String prefixError;
    private String prefixInfo;

    @Override
    public void onEnable() {
        instance = this;
        
        // === DIAGNOSTIC STARTUP LOGGING ===
        getLogger().info("========================================");
        getLogger().info("    LEVEL PLUGIN - D√âMARRAGE D√âTAILL√â");
        getLogger().info("========================================");
        
        // System diagnostics
        logSystemDiagnostics();
        
        // Configuration loading with validation
        getLogger().info("üìÅ [√âTAPE 1/8] Chargement de la configuration...");
        try {
            saveDefaultConfig();
            validateConfiguration();
            getLogger().info("‚úÖ Configuration charg√©e et valid√©e avec succ√®s!");
        } catch (Exception e) {
            getLogger().severe("‚ùå ERREUR CRITIQUE lors du chargement de la configuration: " + e.getMessage());
            e.printStackTrace();
            getServer().getPluginManager().disablePlugin(this);
            return;
        }

        // DatabaseAPI integration with improved error handling
        getLogger().info("üóÑÔ∏è [√âTAPE 2/8] Initialisation de la base de donn√©es...");
        org.bukkit.plugin.Plugin plugin = Bukkit.getPluginManager().getPlugin("DatabaseAPI");
        
        if (plugin != null && plugin.isEnabled()) {
            getLogger().info("   üîç DatabaseAPI d√©tect√©: v" + plugin.getDescription().getVersion());
            getLogger().info("   üì° Tentative de connexion √† la base de donn√©es...");
            try {
                // Use reflection to access DatabaseAPI methods
                Object databaseManager = plugin.getClass().getMethod("getDatabaseManager").invoke(plugin);
                if (databaseManager == null) {
                    throw new RuntimeException("DatabaseManager est null");
                }
                
                database = (Connection) databaseManager.getClass().getMethod("getConnection").invoke(databaseManager);
                if (database == null) {
                    throw new RuntimeException("Connection est null");
                }

                // Test the connection
                if (database.isClosed()) {
                    throw new SQLException("La connexion √† la base de donn√©es est ferm√©e");
                }

                try (Statement stmt = database.createStatement()) {
                    // Only progression system table - player data with experience for levels
                    stmt.executeUpdate(
                            "CREATE TABLE IF NOT EXISTS newhorizon_player_data (" +
                                    "uuid VARCHAR(36) PRIMARY KEY, " +
                                    "experience INT DEFAULT 0)"
                    );
                    getLogger().info("‚úÖ Table newhorizon_player_data cr√©√©e/v√©rifi√©e avec succ√®s!");
                } catch (SQLException e) {
                    getLogger().severe("‚ùå Erreur SQL lors de la cr√©ation de la table: " + e.getMessage());
                    e.printStackTrace();
                    database = null;
                    return;
                }
                getLogger().info("‚úÖ DatabaseAPI connect√© avec succ√®s !");
                
            } catch (NoSuchMethodException e) {
                getLogger().severe("‚ùå M√©thode DatabaseAPI introuvable: " + e.getMessage());
                getLogger().severe("‚ùå Version de DatabaseAPI incompatible!");
                database = null;
            } catch (SQLException e) {
                getLogger().severe("‚ùå Erreur de connexion √† la base de donn√©es: " + e.getMessage());
                e.printStackTrace();
                database = null;
            } catch (Exception e) {
                getLogger().warning("‚ö†Ô∏è Erreur lors de l'acc√®s √† DatabaseAPI: " + e.getMessage());
                getLogger().warning("‚ö†Ô∏è Type d'erreur: " + e.getClass().getSimpleName());
                if (e.getCause() != null) {
                    getLogger().warning("‚ö†Ô∏è Cause: " + e.getCause().getMessage());
                }
                database = null;
            }

        } else {
            if (plugin == null) {
                getLogger().warning("   ‚ö†Ô∏è DatabaseAPI introuvable dans les plugins!");
                getLogger().info("   üí° SOLUTION: T√©l√©chargez DatabaseAPI.jar et placez-le dans plugins/");
            } else {
                getLogger().warning("   ‚ö†Ô∏è DatabaseAPI trouv√© mais d√©sactiv√©!");
                getLogger().info("   üí° SOLUTION: V√©rifiez les erreurs de DatabaseAPI dans les logs");
            }
            getLogger().info("   ‚ÑπÔ∏è Le plugin continuera sans base de donn√©es (mode local).");
            database = null;
        }

        // Initialize managers with error handling
        getLogger().info("‚öôÔ∏è [√âTAPE 3/8] Initialisation des gestionnaires...");
        try {
            setupManagers();
            getLogger().info("   ‚úÖ LevelsManager initialis√©");
            getLogger().info("   ‚úÖ SessionStatManager initialis√©");
            getLogger().info("   ‚úÖ BossBarManager initialis√©");
        } catch (Exception e) {
            getLogger().severe("   ‚ùå ERREUR CRITIQUE lors de l'initialisation des managers: " + e.getMessage());
            getLogger().severe("   üí° SOLUTION: V√©rifiez que toutes les classes sont pr√©sentes dans le JAR");
            e.printStackTrace();
            getServer().getPluginManager().disablePlugin(this);
            return;
        }

        // Verify managers are properly initialized
        if (sessionStatManager == null) {
            getLogger().severe("   ‚ùå ERREUR CRITIQUE: SessionStatManager n'a pas pu √™tre initialis√©!");
            getLogger().severe("   üí° SOLUTION: Recompilez le plugin avec 'mvn clean package'");
            getServer().getPluginManager().disablePlugin(this);
            return;
        }

        // PlaceholderAPI integration
        getLogger().info("üîó [√âTAPE 4/8] Int√©gration PlaceholderAPI...");
        if (Bukkit.getPluginManager().isPluginEnabled("PlaceholderAPI")) {
            try {
                NewHorizonPlaceholder.registerExpansion();
                getLogger().info("   ‚úÖ PlaceholderAPI int√©gr√© avec succ√®s!");
                getLogger().info("   üìã Placeholders disponibles: %newhorizon_level%, %newhorizon_experience%");
            } catch (Exception e) {
                getLogger().warning("   ‚ö†Ô∏è Erreur lors de l'int√©gration PlaceholderAPI: " + e.getMessage());
                getLogger().info("   üí° SOLUTION: V√©rifiez la version de PlaceholderAPI (2.11.6+ recommand√©e)");
            }
        } else {
            getLogger().info("   ‚ÑπÔ∏è PlaceholderAPI non d√©tect√© - Placeholders d√©sactiv√©s");
            getLogger().info("   üí° OPTIONNEL: Installez PlaceholderAPI pour les placeholders");
        }

        // Create StatsGUIListener once for both events and commands
        getLogger().info("üéÆ [√âTAPE 5/8] Cr√©ation des interfaces utilisateur...");
        StatsGUIListener statsGUIListener;
        try {
            statsGUIListener = new StatsGUIListener(sessionStatManager);
            getLogger().info("   ‚úÖ StatsGUIListener cr√©√© avec succ√®s");
        } catch (Exception e) {
            getLogger().severe("   ‚ùå ERREUR CRITIQUE lors de la cr√©ation de StatsGUIListener: " + e.getMessage());
            getLogger().severe("   üí° SOLUTION: V√©rifiez que triumph-gui est inclus dans le JAR");
            e.printStackTrace();
            getServer().getPluginManager().disablePlugin(this);
            return;
        }

        // Listeners - Only progression system listeners with error handling
        getLogger().info("üëÇ [√âTAPE 6/8] Enregistrement des √©v√©nements...");
        try {
            Bukkit.getPluginManager().registerEvents(new PlayerListener(), this);
            getLogger().info("   ‚úÖ PlayerListener enregistr√© (gestion XP/niveaux)");
            
            Bukkit.getPluginManager().registerEvents(new PlayerSessionListener(sessionStatManager), this);
            getLogger().info("   ‚úÖ PlayerSessionListener enregistr√© (statistiques de session)");
            
            Bukkit.getPluginManager().registerEvents(statsGUIListener, this);
            getLogger().info("   ‚úÖ StatsGUIListener enregistr√© (interface statistiques)");
            
            Bukkit.getPluginManager().registerEvents(new NameTagListener(), this);
            getLogger().info("   ‚úÖ NameTagListener enregistr√© (noms personnalis√©s)");
            
            Bukkit.getPluginManager().registerEvents(new PlayerConnectionListener(), this);
            getLogger().info("   ‚úÖ PlayerConnectionListener enregistr√© (connexions)");
            
            Bukkit.getPluginManager().registerEvents(new PlayerDisconnectListener(), this);
            getLogger().info("   ‚úÖ PlayerDisconnectListener enregistr√© (d√©connexions)");
            
            getLogger().info("   üéâ Tous les listeners enregistr√©s avec succ√®s!");
        } catch (Exception e) {
            getLogger().severe("   ‚ùå ERREUR CRITIQUE lors de l'enregistrement des listeners: " + e.getMessage());
            getLogger().severe("   üí° SOLUTION: V√©rifiez que toutes les classes Listener existent");
            e.printStackTrace();
            getServer().getPluginManager().disablePlugin(this);
            return;
        }

        // Tablist Manager
        getLogger().info("üìã [√âTAPE 7/8] Initialisation du TabList...");
        if (Bukkit.getPluginManager().isPluginEnabled("PlaceholderAPI")) {
            try {
                tablistManager = new TablistManager(this);
                tablistManager.start();
                getLogger().info("   ‚úÖ TablistManager d√©marr√© avec succ√®s!");
                getLogger().info("   üìä TabList personnalis√© activ√© avec placeholders");
            } catch (Exception e) {
                getLogger().warning("   ‚ö†Ô∏è Erreur lors du d√©marrage du TablistManager: " + e.getMessage());
                getLogger().info("   üí° SOLUTION: V√©rifiez la configuration du TabList");
            }
        } else {
            getLogger().info("   ‚ÑπÔ∏è PlaceholderAPI requis pour le TabList personnalis√©");
            getLogger().info("   üí° OPTIONNEL: Installez PlaceholderAPI pour le TabList");
        }

        // Commands registration
        getLogger().info("‚å®Ô∏è [√âTAPE 8/8] Enregistrement des commandes...");
        int commandsRegistered = 0;
        try {
            if (getCommand("level") != null) {
                getCommand("level").setExecutor(new LevelCommand());
                getLogger().info("   ‚úÖ Commande /level enregistr√©e!");
                commandsRegistered++;
            } else {
                getLogger().warning("   ‚ö†Ô∏è Commande 'level' non trouv√©e dans plugin.yml!");
                getLogger().severe("   üí° SOLUTION: V√©rifiez la section 'commands' dans plugin.yml");
            }
            
            if (getCommand("stats") != null) {
                getCommand("stats").setExecutor(new StatsCommand(statsGUIListener, sessionStatManager));
                getLogger().info("   ‚úÖ Commande /stats enregistr√©e!");
                commandsRegistered++;
            } else {
                getLogger().warning("   ‚ö†Ô∏è Commande 'stats' non trouv√©e dans plugin.yml!");
                getLogger().severe("   üí° SOLUTION: V√©rifiez la section 'commands' dans plugin.yml");
            }
            
            getLogger().info("   üìä " + commandsRegistered + "/2 commandes enregistr√©es avec succ√®s");
        } catch (Exception e) {
            getLogger().severe("   ‚ùå ERREUR lors de l'enregistrement des commandes: " + e.getMessage());
            getLogger().severe("   üí° SOLUTION: V√©rifiez que les classes Command existent");
            e.printStackTrace();
        }

        // Final configuration loading
        try {
            prefixError = getConfig().getString("general.prefixError", "&c[Erreur] ");
            prefixInfo = getConfig().getString("general.prefixInfo", "&a[Info] ");
            getLogger().info("   ‚úÖ Pr√©fixes de messages configur√©s");
        } catch (Exception e) {
            getLogger().warning("   ‚ö†Ô∏è Erreur lors du chargement des pr√©fixes: " + e.getMessage());
            // Use default values
            prefixError = "&c[Erreur] ";
            prefixInfo = "&a[Info] ";
        }

        // Final startup summary
        getLogger().info("========================================");
        getLogger().info("üéâ LEVEL PLUGIN ACTIV√â AVEC SUCC√àS!");
        getLogger().info("üìä R√©sum√© du d√©marrage:");
        getLogger().info("   ‚Ä¢ Base de donn√©es: " + (database != null ? "‚úÖ Connect√©e" : "‚ùå Mode local"));
        getLogger().info("   ‚Ä¢ PlaceholderAPI: " + (Bukkit.getPluginManager().isPluginEnabled("PlaceholderAPI") ? "‚úÖ Int√©gr√©" : "‚ùå Non disponible"));
        getLogger().info("   ‚Ä¢ Commandes: " + commandsRegistered + "/2 enregistr√©es");
        getLogger().info("   ‚Ä¢ Version: v" + getDescription().getVersion());
        getLogger().info("========================================");
    }



    private void setupManagers() {
        // Only progression system managers
        levelsManager = new LevelsManager();
        sessionStatManager = new SessionStatManager();

        // UI Manager
        new BossBarManager(this);
    }



    @Override
    public void onDisable() {
        // Database connection is managed by DatabaseAPI, no need to close it manually
        getLogger().info("üõë Plugin LEVEL d√©sactiv√© proprement.");
    }

    /**
     * Log detailed system diagnostics for troubleshooting
     */
    private void logSystemDiagnostics() {
        getLogger().info("üîç [DIAGNOSTIC] Informations syst√®me:");
        
        // Java information
        getLogger().info("   ‚òï Java: " + System.getProperty("java.version") + 
                        " (" + System.getProperty("java.vendor") + ")");
        getLogger().info("   üè† Java Home: " + System.getProperty("java.home"));
        
        // Server information
        getLogger().info("   üñ•Ô∏è Serveur: " + getServer().getName() + " " + getServer().getVersion());
        getLogger().info("   üì¶ Bukkit API: " + getServer().getBukkitVersion());
        
        // System information
        getLogger().info("   üíª OS: " + System.getProperty("os.name") + " " + 
                        System.getProperty("os.version") + " (" + System.getProperty("os.arch") + ")");
        
        // Memory information
        Runtime runtime = Runtime.getRuntime();
        long maxMemory = runtime.maxMemory() / 1024 / 1024;
        long totalMemory = runtime.totalMemory() / 1024 / 1024;
        long freeMemory = runtime.freeMemory() / 1024 / 1024;
        getLogger().info("   üß† M√©moire: " + (totalMemory - freeMemory) + "MB utilis√©e / " + 
                        totalMemory + "MB allou√©e / " + maxMemory + "MB max");
        
        // Plugin information
        getLogger().info("   üìã Plugin LEVEL: v" + getDescription().getVersion());
        getLogger().info("   üìÅ Dossier plugin: " + getDataFolder().getAbsolutePath());
        
        // Scan for dependencies
        logDependencyStatus();
    }

    /**
     * Log the status of all plugin dependencies
     */
    private void logDependencyStatus() {
        getLogger().info("üîç [DIAGNOSTIC] √âtat des d√©pendances:");
        
        String[] dependencies = {"DatabaseAPI", "PlaceholderAPI", "ProtocolLib", "Vault", "LuckPerms"};
        
        for (String depName : dependencies) {
            org.bukkit.plugin.Plugin dep = Bukkit.getPluginManager().getPlugin(depName);
            if (dep != null) {
                if (dep.isEnabled()) {
                    getLogger().info("   ‚úÖ " + depName + ": v" + dep.getDescription().getVersion() + " (ACTIV√â)");
                } else {
                    getLogger().warning("   ‚ö†Ô∏è " + depName + ": v" + dep.getDescription().getVersion() + " (D√âSACTIV√â)");
                }
            } else {
                getLogger().info("   ‚ùå " + depName + ": NON INSTALL√â");
            }
        }
        
        // Count total plugins
        org.bukkit.plugin.Plugin[] plugins = Bukkit.getPluginManager().getPlugins();
        getLogger().info("   üìä Total plugins install√©s: " + plugins.length);
    }

    /**
     * Validate configuration file and report any issues
     */
    private void validateConfiguration() {
        getLogger().info("üîç [DIAGNOSTIC] Validation de la configuration:");
        
        // Check if config file exists
        if (!getConfig().contains("general")) {
            getLogger().warning("   ‚ö†Ô∏è Section 'general' manquante dans config.yml");
        } else {
            getLogger().info("   ‚úÖ Section 'general' trouv√©e");
        }
        
        // Validate specific config values
        String[] requiredKeys = {
            "general.prefixError",
            "general.prefixInfo"
        };
        
        for (String key : requiredKeys) {
            if (getConfig().contains(key)) {
                String value = getConfig().getString(key);
                getLogger().info("   ‚úÖ " + key + ": '" + value + "'");
            } else {
                getLogger().warning("   ‚ö†Ô∏è Cl√© manquante: " + key + " (valeur par d√©faut utilis√©e)");
            }
        }
        
        // Check for debug mode
        boolean debugMode = getConfig().getBoolean("debug.enabled", false);
        if (debugMode) {
            getLogger().info("   üêõ MODE DEBUG ACTIV√â - Logging verbeux");
        } else {
            getLogger().info("   ‚ÑπÔ∏è Mode debug d√©sactiv√©");
        }
        
        // Validate file permissions
        if (getDataFolder().canWrite()) {
            getLogger().info("   ‚úÖ Permissions d'√©criture: OK");
        } else {
            getLogger().severe("   ‚ùå ERREUR: Pas de permissions d'√©criture sur " + getDataFolder().getAbsolutePath());
        }
    }

    // Getters
    public String getPrefixError() {
        return prefixError;
    }

    public String getPrefixInfo() {
        return prefixInfo;
    }

    public Connection getDatabase() {
        return database;
    }

    public LevelsManager getLevelsManager() {
        return levelsManager;
    }

    public SessionStatManager getSessionStatManager() {
        return sessionStatManager;
    }




}